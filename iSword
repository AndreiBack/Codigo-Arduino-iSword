#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7789.h> // Hardware-specific library for ST7789
#include <SPI.h>             // Arduino SPI library 
const unsigned char vida[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x9c, 0x00, 0x07, 
  0xbe, 0x00, 0x1c, 0xff, 0x80, 0x1b, 0xff, 0x80, 0x1b, 0xff, 0x80, 0x1f, 0xff, 0x80, 0x0f, 0xff, 
  0x00, 0x0f, 0xff, 0x00, 0x07, 0xfe, 0x00, 0x03, 0xfc, 0x00, 0x01, 0xf8, 0x00, 0x00, 0xf0, 0x00, 
  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char foice [] PROGMEM = {
  0x07, 0x3e, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x1d, 0xfc, 0x00, 0x00, 
  0x1f, 0xff, 0x00, 0x00, 0x1f, 0xbf, 0x00, 0x00, 0x1f, 0x7f, 0x00, 0x00, 0x7f, 0xdf, 0x00, 0x00, 
  0x7b, 0xfe, 0x00, 0x00, 0x7d, 0xfe, 0x00, 0x00, 0xf7, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 
  0xff, 0x1f, 0xe0, 0x00, 0xfe, 0x0e, 0xe0, 0x00, 0xfe, 0x07, 0x60, 0x00, 0xfe, 0x07, 0xf8, 0x00, 
  0xfe, 0x03, 0xfc, 0x00, 0xfe, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x7f, 0x00, 0xfc, 0x00, 0x1f, 0x00, 
  0xfc, 0x00, 0x1f, 0x80, 0x7e, 0x00, 0x0f, 0xc0, 0x7e, 0x00, 0x07, 0xf8, 0x3e, 0x00, 0x03, 0xf8, 
  0x0f, 0x00, 0x01, 0xfc, 0x0f, 0x00, 0x00, 0xec, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x7c, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char undead [] PROGMEM = {
    0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x18, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x70, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x88, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x8e, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xf0, 0x27, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xc3, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x1f, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x7e, 0x1f, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x3f, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x70, 0x7e, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0xfe, 0x60, 0x78, 0x00, 0x00, 0x00, 0x00, 0x01, 0x87, 0xfc, 0x38, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xc6, 0x3c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x1f, 0x38, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xc0, 0x1f, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x7f, 0x04, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xc0, 0xef, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe7, 0xc3, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x60, 0x1f, 0x03, 0x80, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x1f, 0x03, 0x80, 0x00, 0x00, 0x00, 
  0x01, 0xfd, 0xfc, 0x03, 0x80, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x0c, 0x00, 0x00, 0x00, 0x00, 
  0x1e, 0x1f, 0xf0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x70, 0x1f, 0xe0, 0x38, 0x00, 0x00, 0x00, 0x00, 
  0x70, 0xff, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x70, 0xff, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 
  0x73, 0xff, 0xe1, 0x38, 0x00, 0x00, 0x00, 0x00, 0x71, 0xff, 0xe1, 0x8c, 0x00, 0x00, 0x00, 0x00, 
  0x70, 0xff, 0xe1, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x70, 0xfd, 0xe0, 0xcc, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0xf9, 0xf0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x81, 0xe0, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0x83, 0xe7, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x06, 0x07, 0x81, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x1e, 0x07, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0e, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x18, 0x1e, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x3e, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x72, 0x3e, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x73, 0xff, 0xf1, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x73, 0xf1, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x18, 0x1c, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x06, 0x1c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00, 
  0x06, 0x06, 0x0c, 0x03, 0x80, 0x00, 0x00, 0x00, 0x01, 0x86, 0x03, 0x03, 0x80, 0x00, 0x00, 0x00, 
  0x01, 0x81, 0xc3, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x61, 0xc0, 0xf3, 0x80, 0x00, 0x00, 0x00, 
  0x1f, 0x89, 0xcf, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x7f, 0x99, 0xff, 0xc0, 0xc0, 0x00, 0x00, 0x00, 
  0x70, 0x01, 0xf0, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x70, 0x06, 0x30, 0x00, 0xc0, 0x00, 0x00, 0x00
};
const unsigned char death [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x1f, 0x80, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0xe0, 0x7c, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x01, 0xe0, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x01, 0xe0, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x1c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xc0, 0x00, 0x00, 0x1e, 0x5c, 0x02, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0x80, 0x00, 0x00, 0x1f, 0xbf, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0x80, 0x00, 0x00, 0x38, 0xdf, 0xfc, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 
  0x00, 0x00, 0x3d, 0xdf, 0x7c, 0x80, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 
  0x00, 0x3d, 0x87, 0x61, 0xe0, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 
  0x35, 0xe7, 0x60, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3a, 
  0x67, 0x18, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x7c, 0xef, 
  0x18, 0x1f, 0xf7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x0f, 0x00, 0xf9, 0xef, 0x18, 
  0x1f, 0xf7, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x0f, 0x31, 0xfb, 0xef, 0x38, 0x1b, 
  0xc0, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x62, 0x27, 0x62, 0x7c, 0xee, 0xc8, 0xbb, 0xc0, 
  0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x66, 0x31, 0xc7, 0xff, 0xdf, 0x78, 0x7b, 0xc0, 0x01, 
  0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x39, 0xcf, 0x7f, 0xfc, 0x9c, 0x7b, 0xc0, 0x00, 0x78, 
  0x00, 0x00, 0x00, 0x00, 0x08, 0x67, 0x3d, 0xcf, 0xff, 0xfc, 0x9c, 0xfb, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3c, 0x67, 0x3d, 0xec, 0xbf, 0xf3, 0x7c, 0xdb, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3e, 0x6f, 0xdd, 0xfe, 0x5f, 0xf6, 0xf4, 0xdb, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3f, 0x6f, 0xdf, 0xff, 0xbf, 0xf9, 0xfc, 0xdb, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x3c, 0x7f, 0xdf, 0xff, 0x9f, 0xf1, 0xec, 0xdb, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
  0x3f, 0xdf, 0xff, 0x9d, 0xb3, 0xec, 0xdf, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x3f, 
  0x1f, 0xff, 0x99, 0x9f, 0x8c, 0xdf, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x3f, 0x1f, 
  0xff, 0xcb, 0xd7, 0xf4, 0xe7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x3f, 0x1f, 0xff, 
  0xde, 0x7f, 0xfc, 0xe7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x1f, 0x3f, 0xff, 0xde, 
  0x7f, 0xff, 0xe7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1e, 0x3f, 0xff, 0xda, 0xff, 
  0x7f, 0xe7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x9e, 0x3f, 0xff, 0x46, 0xe7, 0x7f, 
  0xf7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8e, 0x37, 0xff, 0x5f, 0xfe, 0x7f, 0xf7, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8f, 0xf7, 0xff, 0x5b, 0x16, 0x7f, 0xff, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xcf, 0xf7, 0xff, 0x4e, 0xe6, 0x7f, 0xfb, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc3, 0xf7, 0xff, 0x4f, 0xe6, 0x7f, 0xff, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0xe7, 0xfe, 0x5f, 0xff, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x23, 0xe7, 0xfe, 0x5e, 0x7f, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x23, 0xe7, 0xff, 0xdf, 0xff, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xc7, 0xff, 0xde, 0xff, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xc7, 0xff, 0xde, 0x7f, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xc7, 0xff, 0xbe, 0x7f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x6f, 0xff, 0xbf, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 
  0xff, 0xbe, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 
  0xbe, 0x7f, 0xfb, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xbe, 
  0x7f, 0xfb, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xbf, 0xff, 
  0xf9, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xbf, 0xff, 0xf9, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xbf, 0xff, 0xf9, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xbf, 0xfe, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xbf, 0xfe, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xbf, 0xfe, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xbf, 0xfe, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfe, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x7f, 0xfe, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0x7f, 0xfe, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0x7f, 0xfe, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0x7f, 0xfe, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0x7f, 0xfe, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0x7f, 0xfe, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
  0x7f, 0xff, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7f, 
  0xff, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7f, 0xff, 
  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7f, 0xff, 0x70, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7f, 0xff, 0x70, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7f, 0xff, 0x70, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7f, 0xff, 0x70, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7f, 0xff, 0x70, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x7f, 0xff, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x7f, 0xff, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xbf, 0xff, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xbf, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xbf, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xbf, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xbf, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xbf, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
  0xbf, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xbf, 
  0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xbf, 0xff, 
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xbf, 0xff, 0xfe, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xbf, 0xff, 0xfe, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xbf, 0xff, 0xff, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xbf, 0xff, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xdf, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xdf, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xdf, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xdf, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xdf, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xff, 0xff, 0xfb, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xff, 0xff, 0x9b, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0xff, 0xff, 0x9b, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
  0xfb, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfb, 
  0xff, 0xf7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfd, 0xf8, 
  0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x7f, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x7f, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x7e, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char nuvem [] PROGMEM = {
  0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x3f, 0xff, 0xff, 0xfb, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x7f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xf8, 0x00, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x7f, 0xfc, 0x00, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xfe, 0x00, 
  0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xc0, 
  0x3f, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0x07, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xe0, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xbf, 0xff, 0xc0, 
  0x00, 0x00, 0x00, 0x00, 0x1c, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x00, 0x00, 
  0x00, 0x07, 0xe0, 0x3f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x0f, 0xf0, 0x7f, 0xff, 0xff, 0xc0, 0x00, 
  0x00, 0x1f, 0xfc, 0x7f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0x7f, 0xff, 0xfc, 0x00, 0x00, 
  0x03, 0xff, 0xff, 0xbf, 0xff, 0xf0, 0x00, 0x00, 0x03, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char logo [] PROGMEM = {
  0x00, 0x00, 0x00, 0x07, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x7f, 0xff, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x7c, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xe0, 0x7c, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xff, 0xfc, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x7f, 
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x7f, 0xff, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0xfe, 0x3f, 0xc0, 0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x3f, 0xc0, 
  0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x3f, 0xc0, 0x7f, 0xff, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x87, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xff, 0xff, 0x87, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 
  0xff, 0x87, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe3, 0xff, 0xf8, 0xff, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe3, 0xff, 0xf8, 0xff, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe3, 0xff, 0xf8, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 
  0x1f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x1f, 0xff, 0xff, 
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf1, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xe1, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xe1, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf1, 0xff, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xf1, 0xe0, 0x7f, 0xff, 0x80, 0x00, 
  0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xf1, 0xe0, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xff, 0xff, 0x8f, 0xf1, 0xe0, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x0f, 0xf0, 0xff, 0xff, 
  0xc0, 0x0f, 0xf0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x0f, 0xf0, 0xff, 0xff, 0xc0, 0x0f, 0xf0, 
  0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x0f, 0xf0, 0xff, 0xff, 0xc0, 0x0f, 0xf0, 0x00, 0x00, 0x01, 
  0xff, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0x87, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 
  0x00, 0xff, 0xe0, 0x3c, 0x07, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0xff, 0xe0, 
  0x3c, 0x07, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0xff, 0xf0, 0x3c, 0x07, 0xff, 
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0x3f, 0xff, 0xf8, 0x1f, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0x3f, 0xff, 0xf8, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xfe, 0x3f, 0xff, 0xf8, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xff, 0xff, 0xff, 0xf8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf8, 
  0x78, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf8, 0x78, 0xff, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf8, 0x78, 0xff, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xf0, 0x03, 0xff, 0xf8, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xf0, 0x03, 0xff, 0xf8, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x03, 
  0xff, 0xf8, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x03, 0xff, 0xf8, 0xf1, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x03, 0xc0, 0x7f, 0xf1, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x03, 0xc0, 0x7f, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xf0, 0x03, 0xc0, 0x7f, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 
  0x03, 0xf8, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x78, 0x00, 
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x78, 0x00, 0x0f, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x78, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3e, 0x00, 0x7f, 0x80, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x3e, 0x00, 0x7f, 0x80, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x7f, 
  0x80, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe3, 0xff, 0x80, 0x0f, 0xe0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe3, 0xc7, 0x80, 0x0f, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xe3, 0xc7, 0x80, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3f, 0xe3, 0xc7, 0x80, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 
  0xc7, 0xf8, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x3e, 0x04, 0xf8, 0x01, 
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x3e, 0x04, 0xf8, 0x01, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x3e, 0x04, 0xf8, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
  0x00, 0x00, 0x0f, 0xff, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x0f, 
  0xff, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x7f, 0x8f, 0xff, 0xfe, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0xfe, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x03, 0xff, 
  0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x03, 0xff, 0xff, 0xff, 0xfe, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x03, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xff, 0xf8, 0x7f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 
  0xf8, 0x7f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x7f, 0xff, 
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00
};

const unsigned char ferreiro [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x01, 
  0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfd, 0x80, 0x00, 0x00, 0x00, 0x01, 0xfd, 0x8d, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x7d, 0x8d, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x60, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xf0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x7f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 
  0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x77, 0xff, 0xe0, 
  0x00, 0x00, 0x00, 0x00, 0x63, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x63, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x7f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const unsigned char esqueleto[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 
  0x00, 0x03, 0x9f, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x0f, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x03, 0x0f, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x03, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x03, 0x0f, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xfc, 0x07, 0xf0, 0x00, 0x00, 
  0x07, 0xff, 0xe1, 0xf3, 0xfb, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xf3, 0xff, 0xff, 0xf0, 0x00, 0x00, 
  0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xbf, 0xff, 0xf0, 0x00, 0x00, 
  0x1f, 0xff, 0xff, 0x3f, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x3f, 0xff, 0xf0, 0x00, 0x00, 
  0x1f, 0xff, 0xff, 0x83, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xcd, 0xff, 0xf0, 0x00, 0x00, 
  0x0f, 0x3f, 0xff, 0xcd, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xfd, 0xff, 0xf8, 0x00, 0x00, 
  0x01, 0xcf, 0xff, 0xf3, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x4f, 0xff, 0xf3, 0xdf, 0xfc, 0x00, 0x00, 
  0x00, 0x4f, 0xff, 0xf3, 0x9f, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc, 0x9f, 0xfc, 0x00, 0x00, 
  0x00, 0x0f, 0xff, 0xfc, 0x9f, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x1f, 0xfc, 0x00, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xdf, 0xfe, 0x00, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xef, 0xfe, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
  0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x03, 0x00, 0xff, 0xff, 0xff, 0xe0, 0x00, 
  0x00, 0x03, 0x00, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0xfe, 0x3f, 0xff, 0xff, 0xf0, 0x00, 
  0x00, 0x00, 0xfe, 0xcf, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x07, 0x00, 0x1f, 0xff, 0xfc, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char archer [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x70, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0x00, 0x00, 0xf3, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x01, 0xe3, 0x00, 0x00, 0x00, 
  0x00, 0x1c, 0x00, 0x03, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x07, 0x9e, 0x00, 0x00, 0x00, 
  0x00, 0x38, 0x00, 0x1f, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 
  0x00, 0x38, 0x00, 0x1f, 0xf8, 0x70, 0x00, 0x00, 0x00, 0x3f, 0xe3, 0xdf, 0xf0, 0x70, 0x00, 0x00, 
  0x00, 0x3f, 0xff, 0xff, 0xfc, 0xf8, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x38, 0x3f, 0xfd, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x38, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x38, 0x00, 0xff, 0xf8, 0x38, 0x00, 0x00, 0x00, 0x38, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x18, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x1c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0x81, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0x83, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x3f, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x1f, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x3e, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x0f, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x7c, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x0f, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0xfc, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x3f, 0xf7, 0xc0, 0x00, 0x00, 
  0x00, 0x01, 0xf8, 0x7f, 0xf7, 0xc0, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x7f, 0xf3, 0xc0, 0x00, 0x00, 
  0x00, 0x01, 0xf8, 0x7f, 0xf3, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x7f, 0xf3, 0xe0, 0x00, 0x00, 
  0x00, 0x01, 0xf0, 0x7e, 0xe3, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x78, 0xe1, 0xe0, 0x00, 0x00, 
  0x00, 0x01, 0xc0, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x01, 0xe0, 0x00, 0x00, 
  0x00, 0x03, 0xc0, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0xf0, 0x00, 0x00, 
  0x00, 0x03, 0x80, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0xf0, 0x00, 0x00
};
const unsigned char arrow [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0xfc, 
  0x3e, 0x00, 0x01, 0xfc, 0x7f, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xf0, 0xc3, 0xff, 0xff, 0xf8, 
  0x72, 0x00, 0x01, 0xfc, 0x3e, 0x00, 0x00, 0xfc, 0x0e, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char escudo[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
  0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x70, 0x00, 0x00, 
  0x00, 0x41, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x02, 0x1f, 0xf0, 0x00, 0x00, 0x03, 
  0xff, 0xf0, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x03, 0xff, 
  0xf0, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xf0, 
  0x00, 0x00, 0x07, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xff, 0xfc, 0x00, 
  0x00, 0x07, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xff, 0xfc, 0x00, 0x00, 
  0x03, 0xff, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x03, 
  0xff, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x03, 0xff, 
  0xfc, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xfc, 
  0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 
  0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 
  0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char martelao[] PROGMEM = {
  0x00, 0x01, 0xe0, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x1f, 0xfe, 0x00, 
  0x00, 0x1f, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x7f, 0xff, 0xe0, 
  0x00, 0x7f, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xfc, 
  0x00, 0x0f, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xf8, 
  0x00, 0x7f, 0xff, 0xf8, 0x00, 0x7f, 0xff, 0xf8, 0x01, 0xfe, 0x3f, 0xe0, 0x01, 0xfc, 0x0f, 0x80, 
  0x07, 0xfc, 0x0f, 0x80, 0x07, 0xf0, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 
  0x7f, 0xc0, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 
  0xfc, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00
};
// ST7789 TFT module connections
#define TFT_CS     10
#define TFT_RST    8  
#define TFT_DC     9  

typedef struct
{
  char nome[4];
  int pontos;
} rank;

rank jogador;
rank players[3] = {{"AND",80 },
                   {"ALX", 52},
                   {"CLY", 68}};
 char nome[3];



int score=0;
int life=3;

// Initialize Adafruit ST7789 TFT library
Adafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_RST);
void registro_jogador();
void drawmenu(void);
void drawcursor(void);
void drawselect1(void);
void drawselect2(void);
void drawselect3(void);
void drawselect4(void);
void drawferreiro(void);
void drawranking(void);
void adicionar_player(void);
void realocacao_ranking(void);
int y=80;
int opc=0; 
int cnt=1;


void setup(void){

  pinMode(3,INPUT_PULLUP);
  pinMode(4,INPUT_PULLUP);
  pinMode(5,INPUT_PULLUP);
  pinMode(6,INPUT_PULLUP);
  Serial.begin(9600);
  randomSeed(analogRead(0));
  
  tft.init(240, 240, SPI_MODE2); 
  tft.setRotation(2);
  
 
  tft.fillScreen(ST77XX_BLUE);
  tft.drawBitmap(60, 60, logo, 100, 100,ST77XX_BLACK);
    tft.setCursor(45,160);
  tft.setTextColor(ST77XX_GREEN);
  tft.setTextSize(4);
  tft.setTextWrap(true);
  tft.print("iSword");
  tft.setCursor(45,165);
  tft.setTextColor(ST77XX_WHITE);
  tft.setTextSize(4);
  tft.setTextWrap(true);
  tft.print("______");
 tft.setCursor(10,200);
  tft.setTextColor(ST77XX_MAGENTA);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Smith Entertainment");
  delay(5000);
    tft.fillScreen(ST77XX_BLACK);
 tft.drawRect(1,1,tft.width()-2,tft.height()-2,ST77XX_GREEN);
 drawmenu();
 drawcursor();
}
 
void loop() {


 while(cnt==1){
  tft.drawRect(1,1,tft.width()-2,tft.height()-2,ST77XX_GREEN);
 drawmenu();
 drawcursor();

 }
 if(digitalRead(3)==0){
  tft.fillScreen(ST77XX_BLACK);
  cnt=1;
  return;
}
while(cnt==3){
  
  registro_jogador();
  if(digitalRead(3)==0){
  tft.fillScreen(ST77XX_BLACK);
  cnt=1;
}

}
}


 

void drawmenu(void){
  tft.setCursor(30,10);
  tft.setTextColor(ST77XX_GREEN,ST77XX_BLACK);
  tft.setTextSize(5);
  tft.setTextWrap(true);
  tft.print("iSword");
  
  tft.setCursor(35,10);
  tft.setTextColor(ST77XX_WHITE,ST77XX_BLACK);
  tft.setTextSize(5);
  tft.setTextWrap(true);
  tft.print("iSword");

  tft.setCursor(70,80);
  tft.setTextColor(ST77XX_WHITE,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Iniciar");

  tft.setCursor(70,120);
  tft.setTextColor(ST77XX_WHITE,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Ranking");

  tft.setCursor(70,160);
  tft.setTextColor(ST77XX_WHITE,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Creditos");

  tft.setCursor(70,200);
  tft.setTextColor(ST77XX_WHITE,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Sair");
}

//Funções select
void drawselect1(void){
  y=80;
   tft.setCursor(70,80);
  tft.setTextColor(ST77XX_CYAN,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Iniciar");
  tft.setCursor(15,y);
  tft.setTextColor(ST77XX_GREEN,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("-|--");
  tft.setCursor(15,120);
  tft.setTextColor(ST77XX_BLACK,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("-|--");
  tft.setCursor(15,160);
  tft.setTextColor(ST77XX_BLACK,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("-|--");
  tft.setCursor(15,200);
  tft.setTextColor(ST77XX_BLACK,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("-|--");

}
void drawselect2(void){
  y=120;
    tft.setCursor(70,120);
  tft.setTextColor(ST77XX_CYAN,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Ranking");
  tft.setCursor(15,80);
  tft.setTextColor(ST77XX_BLACK,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("-|--");
  tft.setCursor(15,y);
  tft.setTextColor(ST77XX_GREEN,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("-|--");
  tft.setCursor(15,160);
  tft.setTextColor(ST77XX_BLACK,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("-|--");
  tft.setCursor(15,200);
  tft.setTextColor(ST77XX_BLACK,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("-|--");
}
void drawselect3(void){
  y=160;
    tft.setCursor(70,160);
  tft.setTextColor(ST77XX_CYAN,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Creditos");

  tft.setCursor(15,80);
  tft.setTextColor(ST77XX_BLACK,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("-|--");
  tft.setCursor(15,120);
  tft.setTextColor(ST77XX_BLACK,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("-|--");
  tft.setCursor(15,y);
  tft.setTextColor(ST77XX_GREEN,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("-|--");
  tft.setCursor(15,200);
  tft.setTextColor(ST77XX_BLACK,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("-|--");
}
void drawselect4(void){
  y=200;
    tft.setCursor(70,200);
  tft.setTextColor(ST77XX_CYAN,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Sair");
  tft.setCursor(15,80);
  tft.setTextColor(ST77XX_BLACK,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("-|--");
  tft.setCursor(15,120);
  tft.setTextColor(ST77XX_BLACK,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("-|--");
  tft.setCursor(15,160);
  tft.setTextColor(ST77XX_BLACK,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("-|--");
  tft.setCursor(15,y);
  tft.setTextColor(ST77XX_GREEN,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("-|--");
}

void drawranking(void){
  
 {
  int i, x, y=90;
  tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_MAGENTA);  //Faz a borda em magenta com 1 pixel de distancia da beirada do display
  tft.setTextColor(ST77XX_RED);
  tft.setCursor(80, 40);
  tft.print("Ranking");
  for(i=0; i<3; i++)
  {
    x = 50;
    tft.setCursor(x, y);
    tft.print(players[i].nome);
    x += 90;
    tft.setCursor(x, y);
    tft.print(players[i].pontos);
    y += 31;
  }

  while(digitalRead(3)==0)
  {
  tft.fillScreen(ST77XX_BLACK);
  cnt=1;
}
 }
}

void drawcreditos(void){
   tft.drawRect(1,1,tft.width()-2,tft.height()-2,ST77XX_ORANGE);
  tft.setCursor(50,60);
  tft.setTextColor(ST77XX_YELLOW,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Andreizinho");
  tft.setCursor(50,100);
  tft.setTextColor(ST77XX_YELLOW,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Cleitinho");
  tft.setCursor(50,140);
  tft.setTextColor(ST77XX_YELLOW,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Alekinho");
  tft.setCursor(50,180);
  tft.setTextColor(ST77XX_YELLOW,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Luizinho");
 
}
void drawsair(void){
   tft.drawRect(1,1,tft.width()-2,tft.height()-2,ST77XX_RED);
  tft.setCursor(50,120);
  tft.setTextColor(ST77XX_WHITE,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Saindo.");
  delay(4000);
    tft.setCursor(50,120);
  tft.setTextColor(ST77XX_YELLOW,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Saindo..");
  delay(5000);
   tft.setCursor(50,120);
  tft.setTextColor(ST77XX_ORANGE,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Saindo...");
  delay(5000);
   tft.setCursor(50,120);
  tft.setTextColor(ST77XX_RED,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Saindo....");
  delay(1000);
  tft.fillScreen(ST77XX_BLACK);
  delay(15000);
  cnt--;
 
}
void drawcursor(){
  tft.setCursor(15,y);
  tft.setTextColor(ST77XX_GREEN,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("-|--");
   if(digitalRead(6)==0){
  if(opc<3){
    opc++;
    switch (opc){ 
        case 0:
          drawselect1();         
          break;
        case 1:
          drawselect2();        
          break;
        case 2:
          drawselect3();        
          break;
        case 3:
          drawselect4();
          break;
        default:
          opc=0;
          break;
    }
    
 }
   }

   if(digitalRead(5)==0){
  if(opc<4){
    opc--;
    switch (opc){ 
        case 0:
          drawselect1();         
          break;
        case 1:
          drawselect2();        
          break;
        case 2:
          drawselect3();        
          break;
        case 3:
          drawselect4();
          break;
        default:
          opc=0;
          break;
    }
 }

}

if(digitalRead(4)==0 && opc==0){
  tft.fillScreen(ST77XX_BLACK);
  cnt+=2;
  realocacao_ranking();
  registro_jogador();
  

}
if(digitalRead(4)==0 && opc==1){
   realocacao_ranking();
  tft.fillScreen(ST77XX_BLACK);
  drawranking();
  cnt++;
}
if(digitalRead(4)==0 && opc==2){
  tft.fillScreen(ST77XX_BLACK);
  drawcreditos();
  cnt++;
}
if(digitalRead(4)==0 && opc==3){
  tft.fillScreen(ST77XX_BLACK);
  cnt++;
  drawsair();
  
}

}



void registro_jogador(){
  int j;
  int pos_x=1;
  int pos_x_n=240;
  int pos_y_n;
  pos_y_n=random(1,150);
  int pos_x_skl=random(240,600);
  int pos_x_arr=random(180,500);
  int nivel=1;
  int skl_life=2;


if(digitalRead(3)==0){
  tft.fillScreen(ST77XX_BLACK);
  cnt=1;
}
tft.fillScreen(ST77XX_BLACK);
  tft.setTextColor(ST77XX_MAGENTA);
  int jogo = 0;
  tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_BLUE);
  int i, x, y=80;
  tft.setCursor(15, 40);
  tft.print("Selecionar player");
  for(i=0; i<3; i++)
  {
    tft.setTextColor(ST77XX_BLUE);
    x = 80;
    tft.setCursor(x, y);
    tft.print(players[i].nome);
    x += 90;
    tft.setCursor(x, y);
    tft.print(players[i].pontos);
    y += 31;
  }
tft.setTextColor(ST77XX_WHITE);
  tft.setCursor(70, y);
  tft.print("Novo player");
  
  y = 80;
  do
  {
    if(jogo == 0)
    {
      if(!digitalRead(6))
      {
        if(y < 173)
        {
          y += 31;
        }
        delay(150);
      }
      
      if(!digitalRead(5))
      {
        if(y > 80)
        {
          y -= 31;
        }
        delay(150);
      }
      
      switch(y)
      {
        case 80:
        
          tft.setCursor(25, y);
          tft.print("-|--");
          tft.setTextColor(ST77XX_BLACK);
          tft.setCursor(25, 111);
          tft.print("-|--");
          tft.setCursor(25, 142);
          tft.print("-|--");
          tft.setCursor(14, 173);
          tft.print("-|--");
          tft.setTextColor(ST77XX_GREEN);
          break;
        
        case 111:
          tft.setCursor(25, y);
          tft.print("-|--");
          tft.setTextColor(ST77XX_BLACK);
          tft.setCursor(25, 80);
          tft.print("-|--");
          tft.setCursor(25, 142);
          tft.print("-|--");
          tft.setCursor(14, 173);
          tft.print("-|--");
          tft.setTextColor(ST77XX_GREEN);
          break;
        
        case 142:
          tft.setCursor(25, y);
          tft.print("-|--");
          tft.setTextColor(ST77XX_BLACK);
          tft.setCursor(25, 80);
          tft.print("-|--");
          tft.setCursor(25, 111);
          tft.print("-|--");
          tft.setCursor(14, 173);
          tft.print("-|--");
          tft.setTextColor(ST77XX_GREEN);
          break;
    
        case 173:
          tft.setCursor(14, y);
          tft.print("-|--");
          tft.setTextColor(ST77XX_BLACK);
          tft.setCursor(25, 80);
          tft.print("-|--");
          tft.setCursor(25, 111);
          tft.print("-|--");
          tft.setCursor(25, 142);
          tft.print("-|--");
          tft.setTextColor(ST77XX_GREEN);
          break;
      }
    }
    else if(jogo == 1)
    {  


//**************************HUD***************************//


      tft.setTextColor(ST77XX_BLACK);
      tft.setTextSize(2);
      tft.setTextWrap(true);
      tft.setCursor(210, 10);
      tft.print(life);
      tft.drawBitmap(190, 5, vida, 20, 20,ST77XX_MAGENTA);
      tft.setTextColor(ST77XX_MAGENTA);
      tft.setTextSize(2);
      tft.setTextWrap(true);
      tft.setCursor(5, 10);
      tft.print(score);
     tft.setTextColor(ST77XX_WHITE);
      tft.setTextSize(2);
      tft.setTextWrap(true);
      tft.setCursor(90, 10);
      tft.print("level");
      tft.print(nivel);
      
      tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_MAGENTA);


      
      //****************************************NIVEL 1*****************************//
      
      
      
      
      if (nivel==1){
      tft.drawBitmap(pos_x_n, pos_y_n, nuvem, 60, 60,ST77XX_WHITE);
      tft.drawBitmap(pos_x_n, pos_y_n, nuvem, 60, 60,ST77XX_CYAN);
      pos_x_n-=40;
      tft.drawBitmap(pos_x_n, pos_y_n, nuvem, 60, 60,ST77XX_WHITE);
      tft.drawBitmap(pos_x_n, pos_y_n, nuvem, 60, 60,ST77XX_CYAN);
    
      if(pos_x_n<=0){
        pos_x_n=370;
        pos_y_n=random(1,150);
      }
      tft.drawBitmap(pos_x, 190, ferreiro, 50, 50,ST77XX_BLACK);
      tft.drawBitmap(180, 180, archer, 60, 60,ST77XX_RED);
//flecha
      tft.drawBitmap(pos_x_arr+20, 180, arrow, 30, 30,ST77XX_BLACK);
      pos_x_arr-=20;
      tft.drawBitmap(pos_x_arr, 180, arrow, 30, 30,ST77XX_BLACK);
      tft.drawBitmap(pos_x_arr+40, 180, arrow, 30, 30,ST77XX_CYAN);
            if(pos_x_arr<=pos_x){
             tft.drawBitmap(pos_x_arr+20, 180, arrow, 30, 30,ST77XX_CYAN);
            tft.drawBitmap(pos_x_arr, 180, arrow, 30, 30,ST77XX_CYAN);
              pos_x_arr=random(350,500);
              
          tft.setTextColor(ST77XX_CYAN);
          tft.setTextSize(2);
          tft.setTextWrap(true);
          tft.setCursor(210, 10);
          tft.print(life);
              life--;}
              if (life<=0){
                tft.fillScreen(ST77XX_BLACK);
                   tft.drawRect(1,1,tft.width()-2,tft.height()-2,ST77XX_CYAN);

   tft.setCursor(20,100);
  tft.setTextColor(ST77XX_MAGENTA,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Obrigado por jogar        iSword!");
   delay(2500);

                tft.fillScreen(ST77XX_BLACK);
                   tft.drawRect(1,1,tft.width()-2,tft.height()-2,ST77XX_CYAN);
                     tft.setCursor(30,100);
  tft.setTextColor(ST77XX_MAGENTA,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Voce conseguiu         "); 
    tft.print(score);  
     tft.print("  pontos!");
     delay(2500);
                tft.fillScreen(ST77XX_BLACK);


                score=0;
                cnt=1;
                return;
            
            }
           if (digitalRead(5)==0){
        int pos_escudo=20;
        tft.drawBitmap(pos_escudo, 190, escudo, 40, 40,ST77XX_BLACK);
                   if(pos_x_arr<=40){
                    tft.drawBitmap(pos_x_arr+20, 180, arrow, 30, 30,ST77XX_CYAN);
                    tft.drawBitmap(pos_x_arr, 180, arrow, 30, 30,ST77XX_CYAN);
                    pos_x_arr=random(350,500);
                    tft.setTextColor(ST77XX_CYAN);
                   tft.setTextSize(2);
                   tft.setTextWrap(true);
                   tft.setCursor(5, 10);
                    tft.print(score);
                    score+=5;
                   }
         }
         
      else{
        tft.drawBitmap(20, 190, escudo, 40, 40,ST77XX_CYAN);
      }
 //Fantasma
      
      tft.drawBitmap(pos_x_skl, 180, esqueleto, 60, 60,ST77XX_WHITE);
      pos_x_skl-=40;
      tft.drawBitmap(pos_x_skl, 180, esqueleto, 60, 60,ST77XX_WHITE);
      tft.drawBitmap(pos_x_skl+40, 180, esqueleto, 60, 60,ST77XX_CYAN);
      
      
      if(pos_x_skl<=pos_x){
        tft.drawBitmap(pos_x_skl, 180, esqueleto, 60, 60,ST77XX_CYAN);
        pos_x_skl=random(400,600);
        tft.setTextColor(ST77XX_CYAN);
          tft.setTextSize(2);
          tft.setTextWrap(true);
          tft.setCursor(210, 10);
          tft.print(life);
          life--;
      }

      if (digitalRead(6)==0){
        int pos_martelo=40;
      tft.drawBitmap(pos_martelo+20, 190, martelao, 30, 30,ST77XX_BLACK);
      while(pos_martelo<=240){
      pos_martelo+=20;
      tft.drawBitmap(pos_martelo, 190, martelao, 30, 30,ST77XX_BLACK);
      tft.drawBitmap(pos_martelo-20, 190, martelao, 30, 30,ST77XX_CYAN);
      }
       if(pos_x_skl<=pos_martelo){
                    tft.drawBitmap(pos_x_skl, 180, esqueleto, 60, 60,ST77XX_CYAN);
                   pos_x_skl=random(400,600);
                 tft.setTextColor(ST77XX_CYAN);
                   tft.setTextSize(2);
                   tft.setTextWrap(true);
                   tft.setCursor(5, 10);
                    tft.print(score);
                    score+=10;
       
       }
      }
      if (score>=50){
        nivel++;
        tft.fillScreen(ST77XX_BLUE);
      }
  }


  
  //***********************************************NIVEL 2*****************8*************************//





  
  if(nivel==2){
      tft.drawBitmap(pos_x_n, pos_y_n, nuvem, 60, 60,ST77XX_CYAN);
      tft.drawBitmap(pos_x_n, pos_y_n, nuvem, 60, 60,ST77XX_BLUE);
      pos_x_n-=40;
      tft.drawBitmap(pos_x_n, pos_y_n, nuvem, 60, 60,ST77XX_CYAN);
      tft.drawBitmap(pos_x_n, pos_y_n, nuvem, 60, 60,ST77XX_BLUE);
      
      if(pos_x_n<=0){
        pos_x_n=370;
        pos_y_n=random(1,150);
      }
      tft.drawBitmap(pos_x, 190, ferreiro, 50, 50,ST77XX_BLACK);
      tft.drawBitmap(180, 180, archer, 60, 60,ST77XX_RED);
//flecha
      tft.drawBitmap(pos_x_arr+20, 180, arrow, 30, 30,ST77XX_BLACK);
      pos_x_arr-=20;
      tft.drawBitmap(pos_x_arr, 180, arrow, 30, 30,ST77XX_BLACK);
      tft.drawBitmap(pos_x_arr+40, 180, arrow, 30, 30,ST77XX_BLUE);
            if(pos_x_arr<=pos_x){
             tft.drawBitmap(pos_x_arr+20, 180, arrow, 30, 30,ST77XX_BLUE);
            tft.drawBitmap(pos_x_arr, 180, arrow, 30, 30,ST77XX_BLUE);
              pos_x_arr=random(350,500);
          tft.setTextColor(ST77XX_BLUE);
          tft.setTextSize(2);
          tft.setTextWrap(true);
          tft.setCursor(210, 10);
          tft.print(life);
              life--;}
              if (life<=0){
                tft.fillScreen(ST77XX_BLACK);
                 tft.setCursor(20,100);
                                    tft.drawRect(1,1,tft.width()-2,tft.height()-2,ST77XX_CYAN);

  tft.setTextColor(ST77XX_MAGENTA,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Obrigado por jogar        iSword!");
   delay(2500);

                tft.fillScreen(ST77XX_BLACK);
                
                   tft.drawRect(1,1,tft.width()-2,tft.height()-2,ST77XX_CYAN);
                     tft.setCursor(30,100);
  tft.setTextColor(ST77XX_MAGENTA,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Voce conseguiu         "); 
    tft.print(score);  
     tft.print("  pontos!");
     delay(2500);
                tft.fillScreen(ST77XX_BLACK);

                score=0;
                cnt=1;
                return;
            
            }
           if (digitalRead(5)==0){
        int pos_escudo=20;
        tft.drawBitmap(pos_escudo, 190, escudo, 40, 40,ST77XX_BLACK);
                   if(pos_x_arr<=40){
                    tft.drawBitmap(pos_x_arr+20, 180, arrow, 30, 30,ST77XX_BLUE);
                    tft.drawBitmap(pos_x_arr, 180, arrow, 30, 30,ST77XX_BLUE);
                    pos_x_arr=random(350,500);
                    tft.setTextColor(ST77XX_BLUE);
                   tft.setTextSize(2);
                   tft.setTextWrap(true);
                   tft.setCursor(5, 10);
                    tft.print(score);
                    score+=5;
                   }
         }
         
      else{
        tft.drawBitmap(20, 190, escudo, 40, 40,ST77XX_BLUE);
      }
 //Fantasma
      
      tft.drawBitmap(pos_x_skl, 180, undead, 60, 60,ST77XX_WHITE);
      pos_x_skl-=40;
      tft.drawBitmap(pos_x_skl, 180, undead, 60, 60,ST77XX_WHITE);
      tft.drawBitmap(pos_x_skl+40, 180, undead, 60, 60,ST77XX_BLUE);
      
      
      if(pos_x_skl<=pos_x){
        tft.drawBitmap(pos_x_skl, 180, undead, 60, 60,ST77XX_BLUE);
        pos_x_skl=random(400,600);
        tft.setTextColor(ST77XX_BLUE);
          tft.setTextSize(2);
          tft.setTextWrap(true);
          tft.setCursor(210, 10);
          tft.print(life);
          life--;
      }

      if (digitalRead(6)==0){
        int pos_martelo=40;
        
      tft.drawBitmap(pos_martelo+20, 190, martelao, 30, 30,ST77XX_BLACK);
      while(pos_martelo<=240){
      pos_martelo+=20;
      tft.drawBitmap(pos_martelo, 190, martelao, 30, 30,ST77XX_BLACK);
      tft.drawBitmap(pos_martelo-20, 190, martelao, 30, 30,ST77XX_BLUE);
      }
      if(pos_x_skl<=pos_martelo){
        skl_life--;
      }
       if(pos_x_skl<=pos_martelo && skl_life<=0){
                    tft.drawBitmap(pos_x_skl, 180, undead, 60, 60,ST77XX_BLUE);
                   pos_x_skl=random(400,600);
                 tft.setTextColor(ST77XX_BLUE);
                   tft.setTextSize(2);
                   tft.setTextWrap(true);
                   tft.setCursor(5, 10);
                    tft.print(score);
                    score+=20;
                    skl_life=2;
    
    }
      }
    if(score>=100){
      nivel++;
       tft.fillScreen(ST77XX_RED);
    }
  }

  
 //************************************************NIVEL 3*****************************************//

 
    if(nivel==3){
      

      
      if(pos_x_n<=0){
        pos_x_n=370;
        pos_y_n=random(1,150);
      }
      tft.drawBitmap(pos_x, 190, ferreiro, 50, 50,ST77XX_BLACK);
      tft.drawBitmap(130, 90, death, 120, 120,ST77XX_BLACK);
      
//flecha
      tft.drawBitmap(pos_x_arr, 180, foice, 30, 30,ST77XX_BLACK);
      pos_x_arr-=20;
      tft.drawBitmap(pos_x_arr, 180, foice, 30, 30,ST77XX_BLACK);
      tft.drawBitmap(pos_x_arr+20, 180, foice, 30, 30,ST77XX_RED);
            if(pos_x_arr<=pos_x){
             tft.drawBitmap(pos_x_arr+20, 180, foice, 30, 30,ST77XX_RED);
            tft.drawBitmap(pos_x_arr, 180, foice, 30, 30,ST77XX_RED);
              pos_x_arr=random(350,500);
          tft.setTextColor(ST77XX_RED);
          tft.setTextSize(2);
          tft.setTextWrap(true);
          tft.setCursor(210, 10);
          tft.print(life);
              life--;}
              if (life<=0){
                tft.fillScreen(ST77XX_BLACK);
                                   tft.drawRect(1,1,tft.width()-2,tft.height()-2,ST77XX_CYAN);

                 tft.setCursor(20,100);
  tft.setTextColor(ST77XX_MAGENTA,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Obrigado por jogar        iSword!");
   delay(2500);

                tft.fillScreen(ST77XX_BLACK);
                
                   tft.drawRect(1,1,tft.width()-2,tft.height()-2,ST77XX_CYAN);
                     tft.setCursor(30,100);
  tft.setTextColor(ST77XX_MAGENTA,ST77XX_BLACK);
  tft.setTextSize(2);
  tft.setTextWrap(true);
  tft.print("Voce conseguiu         "); 
    tft.print(score);  
     tft.print("  pontos!");
     delay(2500);
                tft.fillScreen(ST77XX_BLACK);

                score=0;
                cnt=1;
                return;
            
            }
           if (digitalRead(5)==0){
        int pos_escudo=20;
        tft.drawBitmap(pos_escudo, 190, escudo, 40, 40,ST77XX_BLACK);
                   if(pos_x_arr<=40){
                    tft.drawBitmap(pos_x_arr+20, 180, foice, 30, 30,ST77XX_RED);
                    tft.drawBitmap(pos_x_arr, 180, foice, 30, 30,ST77XX_RED);
                    pos_x_arr=random(350,500);
                    tft.setTextColor(ST77XX_RED);
                   tft.setTextSize(2);
                   tft.setTextWrap(true);
                   tft.setCursor(5, 10);
                    tft.print(score);
                    score+=5;
                   }
         }
         
      else{
        tft.drawBitmap(20, 190, escudo, 40, 40,ST77XX_RED);
      }
 //Fantasma
      
      tft.drawBitmap(pos_x_skl, 180, undead, 60, 60,ST77XX_GREEN);
      pos_x_skl-=60;
      tft.drawBitmap(pos_x_skl, 180, undead, 60, 60,ST77XX_GREEN);
      tft.drawBitmap(pos_x_skl+60, 180, undead, 60, 60,ST77XX_RED);
      
      
      if(pos_x_skl<=pos_x){
        tft.drawBitmap(pos_x_skl, 180, undead, 60, 60,ST77XX_RED);
        pos_x_skl=random(400,600);
        tft.setTextColor(ST77XX_RED);
          tft.setTextSize(2);
          tft.setTextWrap(true);
          tft.setCursor(210, 10);
          tft.print(life);
          life--;
      }

      if (digitalRead(6)==0){
        int pos_martelo=40;
        
      tft.drawBitmap(pos_martelo+20, 190, martelao, 30, 30,ST77XX_BLACK);
      while(pos_martelo<=240){
      pos_martelo+=20;
      tft.drawBitmap(pos_martelo, 190, martelao, 30, 30,ST77XX_BLACK);
      tft.drawBitmap(pos_martelo-20, 190, martelao, 30, 30,ST77XX_RED);
      }
      if(pos_x_skl<=pos_martelo){
        skl_life--;
      }
       if(pos_x_skl<=pos_martelo && skl_life<=0){
                    tft.drawBitmap(pos_x_skl, 180, undead, 60, 60,ST77XX_RED);
                   pos_x_skl=random(400,600);
                 tft.setTextColor(ST77XX_RED);
                   tft.setTextSize(2);
                   tft.setTextWrap(true);
                   tft.setCursor(5, 10);
                    tft.print(score);
                    score+=40;
                    skl_life=2;
      
    }
    }
  }
    }
    else
    {
       tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_MAGENTA);
      tft.setTextSize(3);
      tft.setTextColor(ST77XX_BLUE);
      tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_CYAN);
      tft.setCursor(80, tft.height()/4);
      tft.print("Nome");
      
      char letra[3];
      for(i=0; i<3; i++)
      {
        letra[i] = 65;
      }

      int j = 0;
      x = 50;
      do
      {
        for(i=0; i<3; i++)
        {
          int x1 = i*60 + 50;
          tft.setTextColor(ST77XX_MAGENTA);
          tft.setCursor(x1, tft.height()/2);
          tft.print(letra[i]);
        }
        tft.setCursor(x, tft.height()/2+10);
        tft.print("_");
      

        if(!digitalRead(6))
        {
          if(letra[j]<90)
          {
            tft.setTextColor(ST77XX_BLACK);
            tft.setCursor(x, tft.height()/2);
            tft.print(letra[j]);
            tft.setTextColor(ST77XX_MAGENTA);
            letra[j]++;
            delay(150);
          }
        }
      
        if(!digitalRead(5))
        {
          if(letra[j]>65)
          {
            tft.setTextColor(ST77XX_BLACK);
            tft.setCursor(x, tft.height()/2);
            tft.print(letra[j]);
            tft.setTextColor(ST77XX_MAGENTA);
            letra[j]--;
            delay(150);
          }
        }

        if(!digitalRead(4))
        {
          if(j<2)
          {
            tft.setTextColor(ST77XX_BLACK);
            tft.setCursor(x, tft.height()/2+10);
            tft.print("_");
            tft.setTextColor(ST77XX_MAGENTA);
            x += 60;
            j++;
          }
          else
          {
            break;
          }
          delay(200);
        }

        if(!digitalRead(3))
        {
          tft.fillScreen(ST77XX_BLACK);
          cnt=1;
          return;
        }
      }while(1);

      for(i = 0; i<3; i++)
      {
        jogador.nome[i] = letra[i];
      }

      for(i = 0; i<3; i++)
      {
        if(!strcmp(jogador.nome, players[i].nome))
        {
          tft.fillScreen(ST77XX_BLACK);
          tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_WHITE);
          tft.setTextSize(2);
          tft.setCursor(15, tft.height()/2);
          tft.print("Nome ja registrado");
          delay(1000);
          jogo = 0;
          tft.fillScreen(ST77XX_BLACK);
        }
      }
      if(jogo == 0)
        break;

      tft.fillScreen(ST77XX_BLACK);
      tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_WHITE);
      tft.setCursor(30, tft.height()/4);
      tft.print("Pontos");
      
      int pontos = 0;
      do
      {
        tft.setCursor(tft.width()/2 - 20, tft.height()/2);
        tft.print(pontos);

        if(!digitalRead(6))
        {
          if(pontos<1000000)
          {
            tft.setTextColor(ST77XX_BLACK);
            tft.setCursor(tft.width()/2 - 20, tft.height()/2);
            tft.print(pontos);
            tft.setTextColor(ST77XX_BLUE);
            pontos++;
            delay(50);
          }
        }
      
        if(!digitalRead(5))
        {
          if(pontos>0)
          {
            tft.setTextColor(ST77XX_BLACK);
            tft.setCursor(tft.width()/2 - 20, tft.height()/2);
            tft.print(pontos);
            tft.setTextColor(ST77XX_BLUE);
            pontos--;
            delay(50);
          }
        }

        if(!digitalRead(4))
        {
          break;
          delay(1000);
        }

        if(!digitalRead(3))
        {
          tft.fillScreen(ST77XX_BLACK);
          cnt=1;
          return;
        }
      }while(1);

      if(pontos == 0)
      {
        tft.fillScreen(ST77XX_BLACK);
        tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_WHITE);
        tft.setTextSize(2);
        tft.setCursor(30, tft.height()/2);
        tft.print("Pontuacao nula");
        delay(1000);
        jogo = 0;
        tft.fillScreen(ST77XX_BLACK);
      }
      if(jogo == 0)
        break;
      
      jogador.pontos = pontos;
      if(jogador.pontos < players[2].pontos)
      {
        players[2] = jogador;
      }
      else
      {
        adicionar_player();
      }

      tft.fillScreen(ST77XX_BLACK);
      tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_WHITE);
      tft.setTextSize(2);
      tft.setCursor(10, tft.height()/2);
      tft.print("Jogador adicionado!");
      delay(2000);
      jogo = 1;
      y = 80;
      pos_x=1;
      tft.fillScreen(ST77XX_CYAN);
      life=3;
    }

    if(!digitalRead(4))
    {
      if(y < 173)
      {
        tft.fillScreen(ST77XX_BLACK);
        jogo = 1;
        life=3;
          tft.fillScreen(ST77XX_CYAN);
          pos_x=1;
      }
      else
      {
        tft.fillScreen(ST77XX_BLACK);
        jogo = 2;
        
      }
    }
    
    if(!digitalRead(3))
    {
      tft.fillScreen(ST77XX_BLACK);
      
      break;
    }
  } while(1);
  
}
void adicionar_player(void)
{
  int i;
  for (i = 0; i<3; i++)
  {
    rank aux;
    if (jogador.pontos > players[i].pontos) //Compara pontuação do jogador com as do ranking
    {
      aux = players[i];
      players[i] = jogador;
      jogador = aux;
    }
  }
}
void realocacao_ranking(void){
  {
  int i;
  bool subs;
  
  do
  {
    subs = 0;
    for (i = 0; i<2 ; i++)
    {
      rank aux;
      if (players[i].pontos < players[i+1].pontos) //Compara as pontuações do ranking
      {
        aux = players[i+1];
        players[i+1] = players[i];
        players[i] = aux;
        subs = 1;
      }
    }
  } while(subs != 0);
}
}
